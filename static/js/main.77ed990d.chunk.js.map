{"version":3,"sources":["serviceWorker.ts","record.ts","record-store.ts","statistics.ts","resources.ts","item-status-page.tsx","bar-chart.tsx","overview-page.tsx","routes.ts","side-menu.tsx","loading-page.tsx","error-page.tsx","App.tsx","index.tsx","stores.ts"],"names":["Boolean","window","location","hostname","match","stages","ScanRecord","raw","this","ProductID","timestampInMilliseconds","EventTimeUTCMS","Date","BusinessParty","find","stage","BusinessLocationID","toLowerCase","replace","includes","s","JSON","stringify","Math","abs","split","reduce","a","b","charCodeAt","toString","RecordStore","pollingIntervalMs","init","now","fetch","delay","max","setTimeout","ready","f","err","process","res","json","records","length","filter","r","msg","EventTimeUTC","map","observable","Statistics","recordsStore","item","_","itemRecords","timestampInSeconds","itemId","groupBy","values","pRecs","mean","value","avgPiplineTimePerItemInSeconds","mapValues","recs","n","uniq","latestRecordsPerItem","partner","repeatedScanAlerts","concat","tooManyScansAlerts","adjacentScansAlert","alerts","itemUIDs","uid","seenAt","itemRecordsSortedByTime","i","rec","loc","prev","push","timestamp","timestampAsDate","alertType","prevTime","delta","deltaInMs","count","computed","partnerBrandImage","brand","stageImage","twodigits","ItemStatusPage","inject","observer","currentTimeoutHandle","loadData","reaction","selected","clearTimeout","props","statistics","style","margin","display","alignItems","fontWeight","fontSize","padding","Autocomplete","options","getOptionLabel","option","width","filterOptions","createFilterOptions","matchFrom","onChange","e","selectedItemUID","renderInput","params","TextField","label","variant","CircularProgress","marginLeft","borderRadius","border","backgroundColor","flexDirection","marginRight","overflow","color","letterSpacing","paddingBottom","className","paddingLeft","floor","itemPipelineTimeInSeconds","borderBottom","slice","pageSize","currentPage","recordId","textAlign","verticalAlign","height","backgroundImage","backgroundSize","backgroundRepeat","whiteSpace","backgroundPosition","src","getDate","toLocaleString","month","getFullYear","getHours","getMinutes","TablePagination","rowsPerPageOptions","component","rowsPerPage","page","onChangePage","onChangeRowsPerPage","parseInt","target","indexOf","React","Component","Bar","toRunOnMount","fs","forEach","image","percent","flex","alignContent","transition","ref","runOnMount","ceil","boxSizing","minHeight","minWidth","marginTop","paddingTop","wordBreak","BarChart","labels","colors","images","maxValue","justifyContent","l","Databox","mounted","data","mountedAt","update","initDisplayedData","requestAnimationFrame","finalDisplayedData","initial","title","subText","routes","name","path","menuImg","cssClass","displayIndex","byPartner","itemCountByPartner","partners","Object","keys","toJS","sort","byStage","itemCountByStage","repeatedScanAlertsCount","tooManyAlertsCount","adjacentScansAlertsCount","alertCount","flexWrap","borderRight","alt","AdjacentScansAlertThresholdMs","alert","getTime","toDateString","renderDataSection","avgPiplineTimePerItemInDays","avgRecordsPerItem","getCurrentRoute","pathname","Link","onClick","history","useHistory","SideMenu","route","currentRoute","dangerouslySetInnerHTML","__html","marginBottom","navigateTo","onpopstate","LoadingPage","loadingCaption","setInterval","join","ErrorPage","Alert","severity","AlertTitle","App","maxWidth","position","top","left","bottom","right","PageComponent","stores","createStores","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77ed990d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type Stage = 'Factory' | 'Mixing Center' | 'Distribution Center' | 'Retail Storage';\nexport const stages: Stage[] = ['Factory', 'Mixing Center', 'Distribution Center', 'Retail Storage'];\n\nexport interface IRawScanRecord {\n    ProductID: string,\n    EventTimeUTC: string,\n    BusinessParty: string,\n    EventTimeUTCMS: number,\n    BusinessLocationID: string,\n    EventTimeZoneOffsetMS: number\n}\n\nexport class ScanRecord {\n    constructor(public raw: IRawScanRecord) {}\n\n    itemId(): string {\n        return this.raw.ProductID;\n    }\n\n    timestampInSeconds(): number {\n        return this.timestampInMilliseconds() / 1000;\n    }\n\n    timestampInMilliseconds(): number {\n        return this.raw.EventTimeUTCMS;\n    }\n\n    timestampAsDate(): Date {\n        return new Date(this.timestampInMilliseconds());\n    }\n\n    partner(): string {\n        return this.raw.BusinessParty\n    }\n\n    stage(): Stage|string {\n        return stages.find(stage => this.raw.BusinessLocationID.toLowerCase().replace(/\\s/g, \"\")\n            .includes(stage.toLowerCase().replace(/\\s/g, \"\"))) || this.raw.BusinessLocationID;\n    }\n\n    recordId(): string {\n        // TODO - get from server\n        const hashCode = s => Math.abs(s.split('').reduce((a,b)=>{a=((a<<5)-a)+b.charCodeAt(0);return a&a},0));\n        return hashCode(JSON.stringify(this.raw)).toString();\n    }\n\n    location(): string {\n        return this.raw.BusinessLocationID;\n    }\n}\n","import {observable} from \"mobx\";\nimport {IRawScanRecord, ScanRecord} from \"./record\";\n\nexport class RecordStore {\n\n    @observable ready = false;\n    @observable err: Error = null;\n\n    @observable records: ScanRecord[] = [];\n\n    constructor(pollingIntervalMs = 500) {\n        this.init(pollingIntervalMs)\n    }\n\n    private async init(pollingIntervalMs: number) {\n        try {\n            const now = Date.now();\n            await this.fetch();\n            const delay = Math.max(0, 800 - (Date.now() - now));\n            setTimeout(() => this.ready = true, delay);\n\n            const f = async () => {\n                try {\n                    await this.fetch();\n                    setTimeout(f, pollingIntervalMs)\n                } catch (e) {\n                    this.err = e;\n                }\n            };\n            f();\n        } catch (e) {\n            this.err = e;\n        }\n    }\n\n    public async fetch() {\n        const res = await fetch(process.env.REACT_APP_RECORDS_URL || \"https://png-collector.herokuapp.com/getAllEvents\");\n        const records: IRawScanRecord[] = await res.json();\n\n        if (this.records == null || records.length != this.records.length) {\n            this.records = records\n                .filter(r => (r as any).msg != \"[object Object]\")\n                .filter(r => r.EventTimeUTC != null)\n                .map(raw => new ScanRecord(raw));\n        }\n    }\n}\n","import {RecordStore} from \"./record-store\";\nimport * as _ from \"lodash\";\nimport {computed} from \"mobx\";\nimport {ScanRecord} from \"./record\";\n\nexport type AlertType = 'Repeated Scan' | 'Too Many Scans' | 'Adjacent Scans';\nexport interface IAlert {\n    timestamp: Date,\n    alertType: AlertType,\n    itemId: string,\n    // description: string\n}\n\nexport interface IRepeatedScanAlert extends IAlert {\n    location: string,\n    prevTime: Date\n}\n\nexport interface ITooManyScansAlert extends IAlert {\n    count: number\n}\nexport const TooManyScansAlertThreshold = 10;\n\nexport interface IAdjacentScansAlert extends IAlert {\n    deltaInMs: number\n}\nexport const AdjacentScansAlertThresholdMs = 15 * 60 * 1000;\n\nexport class Statistics {\n\n    constructor(public recordsStore: RecordStore) {}\n\n    @computed get avgRecordsPerItem(): number {\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .values()\n            .map((pRecs: ScanRecord[]) => pRecs.length)\n            .mean()\n            .value() || 0\n    }\n\n    @computed get avgPiplineTimePerItemInDays(): number {\n        return this.avgPiplineTimePerItemInSeconds / 60 / 60 / 24;\n    }\n\n    @computed get avgPiplineTimePerItemInSeconds(): number {\n        const now = Date.now() / 1000;\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .mapValues((recs: ScanRecord[]) => now - _.min(recs.map(r => r.timestampInSeconds())))\n            .map(n => Math.max(n, 0))\n            .mean()\n            .value() || 0;\n    }\n\n    itemPipelineTimeInSeconds(item: string): number {\n        const now = Date.now() / 1000;\n        return now - _.min(this.itemRecords(item).map(r => r.timestampInSeconds()));\n    }\n\n    @computed get itemUIDs(): string[] {\n        return _.chain(this.recordsStore.records)\n            .map(r => r.itemId())\n            .uniq()\n            .value();\n    }\n\n    @computed get latestRecordsPerItem(): ScanRecord[] {\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .mapValues((recs: ScanRecord[]) => _.maxBy(recs, (r: ScanRecord) => r.timestampInSeconds()))\n            .values()\n            .value()\n    }\n\n    public itemRecords(itemId: string): ScanRecord[] {\n        return this.recordsStore.records.filter(r => r.itemId() == itemId);\n    }\n\n    public itemRecordsSortedByTime(itemId: string): ScanRecord[] {\n        return _.sortBy(this.itemRecords(itemId), r => r.timestampInMilliseconds());\n    }\n\n    @computed get itemCountByPartner(): {[partnerName: string]: number} {\n        return _.chain(this.latestRecordsPerItem)\n            .groupBy(r => r.partner())\n            .mapValues(recs => recs.length)\n            .value()\n    }\n\n    @computed get itemCountByStage(): {[partnerName: string]: number} {\n        return _.chain(this.latestRecordsPerItem)\n            .groupBy(r => r.stage())\n            .mapValues(recs => recs.length)\n            .value()\n    }\n\n    @computed get alerts(): IAlert[] {\n        return (this.repeatedScanAlerts as IAlert[])\n            .concat(this.tooManyScansAlerts)\n            .concat(this.adjacentScansAlert);\n    }\n\n    @computed get repeatedScanAlerts(): IRepeatedScanAlert[] {\n        const alerts: IRepeatedScanAlert[] = [];\n        for (const uid of this.itemUIDs) {\n            const seenAt = {};\n            const records = this.itemRecordsSortedByTime(uid);\n            for (let i = 0; i < records.length; i++) {\n                const rec = records[i];\n                const loc = rec.location();\n                if (seenAt[loc] != null && seenAt[loc] < i - 1) {\n                    const prev = records[seenAt[loc]];\n                    alerts.push({\n                        timestamp: rec.timestampAsDate(),\n                        alertType: 'Repeated Scan',\n                        itemId: rec.itemId(),\n                        location: rec.location(),\n                        prevTime: prev.timestampAsDate()\n                    });\n                    break;\n                }\n                seenAt[rec.location()] = i;\n            }\n        }\n        return alerts;\n    }\n\n    @computed get adjacentScansAlert(): IAdjacentScansAlert[] {\n        const alerts: IAdjacentScansAlert[] = [];\n        for (const uid of this.itemUIDs) {\n            const records = this.itemRecordsSortedByTime(uid);\n            for (let i = 1; i < records.length; i++) {\n                const rec = records[i];\n                const delta = (records[i].timestampInMilliseconds() - records[i - 1].timestampInMilliseconds());\n                if (records[i].location() != records[i - 1].location() && delta < AdjacentScansAlertThresholdMs) {\n                    alerts.push({\n                        timestamp: rec.timestampAsDate(),\n                        alertType: 'Adjacent Scans',\n                        itemId: rec.itemId(),\n                        deltaInMs: delta\n                    });\n                    break;\n                }\n            }\n        }\n        return alerts;\n    }\n\n    @computed get tooManyScansAlerts(): ITooManyScansAlert[] {\n        return this.itemUIDs\n            .map(uid => this.itemRecordsSortedByTime(uid))\n            .filter(records => records.length > TooManyScansAlertThreshold)\n            .map(records => ({\n                timestamp: records[TooManyScansAlertThreshold].timestampAsDate(),\n                alertType: 'Too Many Scans',\n                itemId: records[0].itemId(),\n                count: records.length\n            }));\n    }\n}\n","export function partnerBrandImage(brand: string): string {\n    return {\n        'amazon': '/amazon.png',\n        'p&g': '/png.png',\n        'fedex': '/fedex.png',\n        'dhl': '/dhl.png'\n    }[brand.toLowerCase()] || '/unknown_brand.png';\n}\n\nexport function stageImage(stage: string): string {\n    return {\n        'factory': '/factory.svg',\n        'mixingcenter': '/mixingcenter.svg',\n        'distributioncenter': '/distributioncenter.svg',\n        'retailstorage': '/retailstorage.svg'\n    }[stage.toLowerCase().replace(/\\s/g, \"\")] || '/unknown_stage.svg';\n}\n\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {inject, observer} from \"mobx-react\";\nimport {Statistics} from \"./statistics\";\nimport {observable, reaction} from \"mobx\";\nimport {CircularProgress, TablePagination, TextField} from \"@material-ui/core\";\nimport {Autocomplete, createFilterOptions} from \"@material-ui/lab\";\nimport {partnerBrandImage, stageImage} from \"./resources\";\n\nconst twodigits = (n:number) => (n < 10 ? '0' : '') + n.toString();\n\n@inject(\"statistics\")\n@observer\nexport class ItemStatusPage extends React.Component<{statistics: Statistics}, {}> {\n\n    @observable private selectedItemUID: string;\n    @observable private ready = false;\n    @observable private pageSize: number = 5;\n    @observable private currentPage: number = 0;\n    private currentTimeoutHandle;\n\n    get selected(): string {\n        return this.selectedItemUID != null ?\n            (\n                this.props.statistics.itemUIDs.indexOf(this.selectedItemUID) != -1 ?\n                    this.selectedItemUID\n                    :\n                    null\n            )\n            : this.props.statistics.itemUIDs[0];\n    }\n\n    componentDidMount() {\n        this.loadData();\n        reaction(\n            () => this.selected,\n            () => this.loadData()\n        )\n    }\n\n    loadData() {\n        const uid = this.selected;\n        if (uid) {\n            this.ready = false;\n            if (this.currentTimeoutHandle) {\n                clearTimeout(this.currentTimeoutHandle);\n            }\n            this.currentTimeoutHandle = setTimeout(() => {\n                this.ready = true;\n                this.currentTimeoutHandle = null;\n            }, 1000);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n    }\n\n    render() {\n        const records = this.props.statistics.itemRecords(this.selected);\n        return <div style={{margin: \"30px\"}}>\n            <div style={{\n                display: 'flex',\n                alignItems: 'center'\n            }}>\n                <div style={{\n                    display: 'inline-block',\n                    fontWeight: 'bold',\n                    fontSize: 21,\n                    padding: '32px 15px 32px 0'\n                }}>Search an item:</div>\n                {/*<datalist id={\"items\"}>*/}\n                {/*    {this.props.statistics.itemUIDs.map(uid => <option value={uid}/>)}*/}\n                {/*</datalist>*/}\n                {/*<input value={this.selectedItemUID == null ? this.selected : this.selectedItemUID} onChange={e => this.selectedItemUID = e.target.value} list={\"items\"}/>*/}\n                {this.props.statistics.itemUIDs.length > 0 && <Autocomplete\n                    options={this.props.statistics.itemUIDs}\n                    getOptionLabel={option => option}\n                    style={{ width: 300}}\n                    filterOptions={createFilterOptions({\n                        matchFrom: 'start'\n                    })}\n                    onChange={(e, value) => {\n                        this.selectedItemUID = value;\n                        this.loadData();\n                    }}\n                    value={this.selectedItemUID == null ? this.selected : this.selectedItemUID}\n                    renderInput={params => <TextField {...params} label=\"Item UID\" variant=\"outlined\" />}\n                />}\n                {!this.ready && <CircularProgress style={{marginLeft: 20}}/>}\n            </div>\n            {this.selected != null && this.ready && <div style={{\n                borderRadius: 4,\n                border: \"solid 1px #ebedf8\",\n                backgroundColor: \"#f8f8f8\",\n                padding: 37,\n                display: 'flex',\n                flexDirection: 'row',\n                marginRight: 30,\n                overflow: \"auto\"\n            }}>\n                <div>\n                    <div style={{\n                        fontSize: 19,\n                        color: \"#1a173b\",\n                        letterSpacing: 0.13,\n                        paddingBottom: 12\n                    }}>\n                        Item UID\n                    </div>\n                    <div style={{\n                        color: \"#484848\",\n                        fontSize: 15\n                    }}>\n                        {this.selected}\n                    </div>\n                </div>\n                <div>\n                    <table className={\"item-table\"} style={{\n                        paddingLeft: 40\n                    }}>\n                        <tr style={{\n                            fontSize: 15,\n                            letterSpacing: 0.1,\n                            color: \"#5e6e7b\"\n                        }}>\n                            <td>Brand</td>\n                            <td>Description</td>\n                            <td>Catalog No.</td>\n                            <td>Time in pipeline</td>\n                            <td>Status</td>\n                        </tr>\n                        <tr style={{\n                            fontSize: 16,\n                            color: \"#060606\"\n                        }}>\n                            <td>Gillette</td>\n                            <td>Razor Package 135Xg</td>\n                            <td>1225434DLX</td>\n                            <td>{Math.floor(this.props.statistics.itemPipelineTimeInSeconds(this.selected) / 60 / 60 / 24)} days</td>\n                            <td style={{\n                                fontWeight: 'bold',\n                                fontSize: 16,\n                                color: '#769806'\n                            }}>OK</td>\n                        </tr>\n                    </table>\n                </div>\n            </div>}\n            {this.selected && this.ready && <div>\n                <div style={{\n                    display: 'inline-block',\n                    fontWeight: 'bold',\n                    fontSize: 21,\n                    padding: '32px 15px 32px 0',\n                    borderBottom: \"solid 0.5px #ebedf8\",\n                    width: \"100%\"\n                }}>Item history</div>\n                <div>\n                    <div className={'item-history-table'}>\n                        <table>\n                            <tr>\n                                <td></td>\n                                <td>Partner</td>\n                                <td>Stage</td>\n                                <td>Date</td>\n                                <td>Time</td>\n                                <td>Status</td>\n                                <td>Comments</td>\n                            </tr>\n                            {\n                                _.sortBy(records.slice(this.pageSize * this.currentPage, this.pageSize * (this.currentPage + 1)), r => -r.timestampInSeconds())\n                                    .map(r => <tr>\n                                        <td className={'record-id-cell'}>Record {r.recordId()}</td>\n                                        <td style={{textAlign: 'left'}}>\n                                            <div style={{\n                                                verticalAlign: 'middle',\n                                                width: 30,\n                                                height: 30,\n                                                backgroundImage: `url(${partnerBrandImage(r.partner())})`,\n                                                backgroundSize: 'contain',\n                                                backgroundRepeat: 'no-repeat',\n                                                whiteSpace: 'nowrap',\n                                                backgroundPosition: 'center',\n                                                display: 'inline-block'\n                                            }}/>\n                                            &nbsp;&nbsp;&nbsp;{r.partner()}\n                                        </td>\n                                        <td>\n                                            <img src={stageImage(r.stage())} style={{\n                                                verticalAlign: 'middle',\n                                                width: 20,\n                                                height: 20,\n                                            }}/>&nbsp;&nbsp;&nbsp;\n                                            {r.stage()}\n                                        </td>\n                                        <td>{`${twodigits(r.timestampAsDate().getDate())} ${r.timestampAsDate().toLocaleString('default', { month: 'short' })}, ${r.timestampAsDate().getFullYear()}`}</td>\n                                        <td>{`${twodigits(r.timestampAsDate().getHours())}:${twodigits(r.timestampAsDate().getMinutes())}`}</td>\n                                        <td className={'status-cell'}><div>OK</div></td>\n                                        <td style={{color: \"grey\", fontWeight: \"normal\", textAlign: 'center'}}>N/A</td>\n                                    </tr>)\n                            }\n                        </table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10]}\n                            component=\"div\"\n                            count={records.length}\n                            rowsPerPage={this.pageSize}\n                            page={this.currentPage}\n                            onChangePage={(e, page) => this.currentPage = page}\n                            onChangeRowsPerPage={(e) => {\n                                this.pageSize = parseInt(e.target.value)\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>}\n        </div>\n    }\n}\n","import * as _ from \"lodash\";\nimport React from \"react\";\n\nconst scale = 0.6;\n\nclass Bar extends React.Component<{\n                 label: string,\n                 value: number,\n                 color: string,\n                 image: string,\n                 percent: number\n             }, {}> {\n\n    toRunOnMount = [];\n\n    componentDidMount() {\n        const fs = this.toRunOnMount;\n        this.toRunOnMount = null;\n        fs.forEach(f => f());\n    }\n\n    runOnMount(f) {\n        if (this.toRunOnMount == null) {\n            f();\n        } else {\n            this.toRunOnMount.push(f);\n        }\n    }\n\n    render() {\n        const {label, value, color, image, percent} = this.props;\n\n        return <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            margin: \"0 3px\"\n        }}>\n            <div\n                style={{flex: 1, display: \"flex\", flexDirection: \"column\", alignContent: 'flex-end', paddingBottom: 5}}>\n                <div style={{flex: 1}}/>\n                <div style={{textAlign: 'center', fontSize: 40 * scale, paddingBottom: 3}}>{value}</div>\n                <div style={{\n                    backgroundColor: color,\n                    height: 0,\n                    transition: 'height 1s'\n                }} ref={e => this.runOnMount(() => {\n                    setTimeout(() => {\n                        if (e) e.style.height = `${Math.ceil(percent * 100)}%`\n                    }, 10);\n                })}/>\n            </div>\n            <div style={{\n                height: 124 * scale + 10,\n                width: 114 * scale,\n                backgroundColor: \"#e9e9e9\",\n                boxSizing: 'border-box',\n                display: 'flex',\n                flexDirection: 'column',\n                fontSize: 16 * scale,\n                color: \"#060606\",\n                alignItems: 'center'\n            }}>\n                <div style={{\n                    height: 70 * scale,\n                    minHeight: 70 * scale,\n                    width: 70 * scale,\n                    minWidth: 70 * scale,\n                    marginTop: 20 * scale,\n                    backgroundImage: `url(${image})`,\n                    backgroundPosition: 'center',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: 'contain',\n                }}/>\n                <span style={{\n                    textAlign: 'center',\n                    paddingTop: 5,\n                    paddingBottom: 20 * scale,\n                    wordBreak: 'break-word'\n                }}>{label}</span>\n            </div>\n        </div>\n    }\n}\n\nexport class BarChart extends React.Component<{\n    labels: string[],\n    values: number[],\n    colors: string[],\n    images: string[]\n}, {}> {\n\n    render() {\n        const {labels, values, colors, images} = this.props;\n        const maxValue = _.max(values);\n        return <div style={{\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center'\n        }}>\n            {labels.map(\n                (l, i) => <Bar\n                    label={labels[i]}\n                    value={values[i]}\n                    image={images[i]}\n                    color={colors[i % colors.length]}\n                    percent={maxValue == 0 ? 0 : values[i] / maxValue}\n                />\n            )}\n            {/*{[labels[0], labels[1], labels[2], labels[3]].map(*/}\n            {/*    (l, i) => <Bar*/}\n            {/*        label={labels[i]}*/}\n            {/*        value={values[i]}*/}\n            {/*        image={images[i]}*/}\n            {/*        color={colors[i % colors.length]}*/}\n            {/*        percent={maxValue == 0 ? 0 : values[i] / maxValue}*/}\n            {/*    />*/}\n            {/*)}*/}\n        </div>\n    }\n\n}\n","import React from \"react\";\nimport * as _ from 'lodash';\nimport {inject, observer} from \"mobx-react\";\nimport {\n    AdjacentScansAlertThresholdMs, IAdjacentScansAlert,\n    IAlert,\n    IRepeatedScanAlert,\n    ITooManyScansAlert,\n    Statistics,\n    TooManyScansAlertThreshold\n} from \"./statistics\";\nimport {BarChart} from \"./bar-chart\";\nimport {observable, toJS} from \"mobx\";\nimport {partnerBrandImage, stageImage} from \"./resources\";\nimport {TablePagination} from \"@material-ui/core\";\n\n@observer\nclass Databox extends React.Component<{\n    title: string,\n    data: number\n    subText?: string\n}, {}> {\n\n    @observable initDisplayedData: number = 0;\n    @observable finalDisplayedData: number = null;\n    @observable initial = true;\n\n    mounted = false;\n\n    componentDidMount() {\n        this.mounted = true;\n        const duration = 1000;\n        const data = this.props.data || 0;\n        const mountedAt = Date.now();\n        const update = () => {\n            if (this.mounted) {\n                const delta = Date.now() - mountedAt;\n                if (delta < duration) {\n                    this.initDisplayedData = Math.floor(data * (delta / duration));\n                    requestAnimationFrame(update);\n                } else {\n                    this.finalDisplayedData = data;\n                    this.initial = false;\n                }\n            }\n        };\n        update();\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    componentDidUpdate() {\n        this.finalDisplayedData = this.props.data;\n    }\n\n    render() {\n        return <div className={'databox'}>\n            <div className={'databox-title'}>{this.props.title}</div>\n            <div className={'databox-infotext'}>\n                <span>{this.initial ? this.initDisplayedData : this.finalDisplayedData}</span>\n                {this.props.subText &&\n                    <div className={'databox-subtext'}>\n                        <span>{this.props.subText}</span>\n                    </div>\n                }\n            </div>\n        </div>\n    }\n\n}\n\n@inject('statistics')\n@observer\nexport class OverviewPage extends React.Component<{\n    statistics: Statistics\n}, {}> {\n    @observable private rowsPerPage: number = 5;\n    @observable private page: number = 0;\n    render() {\n        const byPartner = this.props.statistics.itemCountByPartner;\n        const partners = Object.keys(toJS(byPartner)).sort();\n        const byStage = this.props.statistics.itemCountByStage;\n        const stages = Object.keys(toJS(byStage)).sort();\n        const repeatedScanAlertsCount = this.props.statistics.alerts.filter(a => a.alertType == 'Repeated Scan').length;\n        const tooManyAlertsCount = this.props.statistics.alerts.filter(a => a.alertType == 'Too Many Scans').length;\n        const adjacentScansAlertsCount = this.props.statistics.alerts.filter(a => a.alertType == 'Adjacent Scans').length;\n        const alertCount = this.props.statistics.alerts.length;\n\n        return <div style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n            justifyContent: 'center',\n        }}>\n            <div style={{display: 'flex', flexDirection:'column', flex: 1, borderRight: '1px solid #ebedf8'}}>\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: 'wrap'\n                }}>\n                    <div style={{flex: 1, borderRight: '1px solid #ebedf8', marginTop: 50}}>\n                        <div className=\"title\" style={{\n                            height: 46,\n                            borderBottom: '1px solid #ebedf8',\n                            alignItems: 'start'\n                        }}>\n                            <span>Products by stage</span>\n                        </div>\n                        <div style={{height: 300, padding: 20, marginLeft: 50, borderBottom: '1px solid #ebedf8'}}>\n                            <BarChart\n                                colors={[\"#035093\", \"#035093\", \"#4889c2\", \"#0a4171\"]}\n                                images={stages.map(stage => stageImage(stage))}\n                                labels={stages}\n                                values={stages.map(stage => byStage[stage])}\n                            />\n                        </div>\n                    </div>\n                    <div style={{flex: 1, marginTop: 50}}>\n                        <div className=\"title\" style={{\n                            height: 46,\n                            borderBottom: '1px solid #ebedf8',\n                            alignItems: 'start'\n                        }}>\n                            <span>Products by partner</span>\n                        </div>\n                        <div style={{height: 300, padding: 20, borderBottom: '1px solid #ebedf8'}}>\n                            <BarChart\n                                colors={[\"#bb8888\", \"#a37878\", \"#d19d9d\", \"#bb8888\"]}\n                                images={partners.map(partner => partnerBrandImage(partner))}\n                                labels={partners}\n                                values={partners.map(partner => byPartner[partner])}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div style={{marginLeft: 50}}>\n                    <div style={{\n                        height: 50,\n                        borderBottom: '1px solid #ebedf8',\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center'\n                    }}>\n                        <img src={process.env.REACT_APP_BASE_URL + \"/alert.svg\"} alt={\"alert\"} style={{padding: \"0 10px\"}}/> <span>Alerts</span>\n                    </div>\n                    {\n                        alertCount > 0 ?\n                        <div className={\"alerts\"}>\n                            <ul>\n                                {repeatedScanAlertsCount > 0 && <li><b>{repeatedScanAlertsCount}</b> item{repeatedScanAlertsCount > 1 ? 's were' : ' was'} rescanned in a previous location (<i>Repeated-Scan-Alert</i>)</li>}\n                                {tooManyAlertsCount > 0 && <li><b>{tooManyAlertsCount}</b> item{tooManyAlertsCount > 1 ? 's were' : ' was'} scanned more than {TooManyScansAlertThreshold} times (<i>Too-Many-Scans-Alert</i>)</li>}\n                                {adjacentScansAlertsCount > 0 && <li><b>{adjacentScansAlertsCount}</b> item{adjacentScansAlertsCount > 1 ? 's were' : ' was'} scanned in two or more different locations within a period of less than {AdjacentScansAlertThresholdMs / 1000 / 60} minutes (<i>Adjacent-Scans-Alert</i>)</li>}\n                            </ul>\n                            <table className={\"alerts-table\"}>\n                                <tr>\n                                    <td>TIMESTAMP</td>\n                                    <td>ALERT TYPE</td>\n                                    <td>ITEM ID</td>\n                                    <td>DESCRIPTION</td>\n                                </tr>\n                                {_.sortBy(this.props.statistics.alerts, alert => -alert.timestamp.getTime())\n                                    .slice(this.page * this.rowsPerPage, (this.page+1) * this.rowsPerPage)\n                                    .map((alert: IAlert) => <tr>\n                                        <td style={{whiteSpace: \"nowrap\"}}>{alert.timestamp.toDateString()}</td>\n                                        <td style={{whiteSpace: \"nowrap\"}}>{alert.alertType}</td>\n                                        <td style={{whiteSpace: \"nowrap\"}}>{alert.itemId}</td>\n                                        <td style={{width: \"100%\"}}>{\n                                            alert.alertType == 'Repeated Scan' ?\n                                                <span> Item was scanned twice at location <i>{(alert as IRepeatedScanAlert).location}</i> (previous scan was at {(alert as IRepeatedScanAlert).prevTime.toDateString()})</span>\n                                            : alert.alertType == 'Too Many Scans' ?\n                                                <span> Item was scanned <b>{(alert as ITooManyScansAlert).count}</b> times</span>\n                                            : alert.alertType == 'Adjacent Scans' ?\n                                                <span> Detected two consecutive scans in different locations in under <b>{Math.ceil((alert as IAdjacentScansAlert).deltaInMs / 1000 / 60)}</b> minutes.</span>\n                                            :\n                                                <span></span>\n                                        }</td>\n                                    </tr>)}\n                            </table>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10]}\n                                component=\"div\"\n                                count={this.props.statistics.alerts.length}\n                                rowsPerPage={this.rowsPerPage}\n                                page={this.page}\n                                onChangePage={(e, page) => this.page = page}\n                                onChangeRowsPerPage={(e) => {\n                                    this.rowsPerPage = parseInt(e.target.value)\n                                }}\n                            />\n                        </div>\n                        : <div style={{color: '#bebebe', margin: 10}}>- None -</div>\n                    }\n\n                </div>\n            </div>\n            <div style={{\n                letterSpacing: 1.13,\n                fontSize: 19,\n            }}>\n                {this.renderDataSection()}\n            </div>\n        </div>\n    }\n\n    private renderDataSection() {\n        const {statistics} = this.props;\n        return <div style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }}>\n            <div className={\"title\"} style={{\n                height: 96,\n                width: '100%',\n                borderBottom: '1px solid #ebedf8',\n            }}><span style={{marginTop: 22}}>Data</span></div>\n            <div style={{margin:\"30px 30px 0 30px\"}}>\n                <table className={'data-table'}>\n                    <tr>\n                        <td className={'border-right border-bottom'}><Databox title={\"Alerted Products\"} data={statistics.itemUIDs.length}/></td>\n                        <td className={'border-left border-bottom'}><Databox title={\"Avg. Time in pipeline\"} data={Math.floor(statistics.avgPiplineTimePerItemInDays)} subText={\"DAYS\"}/></td>\n                    </tr>\n                    <tr>\n                        <td className={'border-right border-top'}><Databox title={\"Suspected counterfeit\"} data={0}/></td>\n                        <td className={'border-left border-top'}><Databox title={\"Avg. scans per item\"} data={Math.floor(statistics.avgRecordsPerItem)}/></td>\n                    </tr>\n                </table>\n                <div style={{\n                    borderBottom: \"1px solid #ebedf8\",\n                    height: 0\n                }}/>\n                <div style={{\n                    fontSize: 16,\n                    color: '#060606',\n                    margin: '70px 0 40px'\n                }}>\n                    Items Location\n                </div>\n                <img src={process.env.REACT_APP_BASE_URL + \"/worldmap.svg\"} style={{width: '100%'}} alt=\"Route tracking\"/>\n            </div>\n        </div>\n    }\n}\n","import {ItemStatusPage} from \"./item-status-page\";\nimport {OverviewPage} from \"./overview-page\";\n\ntype RouteName = \"itemStatus\" | \"overview\";\n\nexport interface IRoute {\n  name: RouteName;\n  displayIndex: number;\n  cssClass: string;\n  path: string,\n  menuImg: string\n  component;\n}\n\nexport const routes: IRoute[] = [\n  {\n    name: 'itemStatus',\n    path: '/item_status',\n    menuImg: '/menu-item-status.svg',\n    cssClass: 'item-status',\n    displayIndex: 1,\n    component: ItemStatusPage\n  },\n  { // must be last\n    name: 'overview',\n    path: '/',\n    menuImg: '/menu-overview.svg',\n    cssClass: 'overview',\n    displayIndex: 0,\n    component: OverviewPage\n  }\n];\n\n\nexport function getCurrentRoute(): IRoute {\n  return routes.find(r => r.path == window.location.pathname) || routes[routes.length - 1];\n}\n\nexport function getRoute(name: RouteName): IRoute {\n  return routes.find(r => r.name == name);\n}\n","import * as _ from 'lodash';\n\nimport React from \"react\";\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport {getCurrentRoute, IRoute, routes} from \"./routes\";\nimport {observer} from \"mobx-react\";\nimport { useHistory } from \"react-router-dom\";\nimport {observable} from \"mobx\";\n\nfunction Link({onClick, className}) {\n    const history = useHistory();\n    return <div onClick={() => onClick(history)} style={{width: '100%', boxSizing: 'border-box', margin: 30}} className={className}/>;\n}\n\n@observer\nexport class SideMenu extends React.Component<{},{}> {\n\n    @observable currentRoute = getCurrentRoute();\n\n    render() {\n        const className = (route: IRoute) => {\n            return `menu-item menu-item-${route.cssClass} ${this.currentRoute.name == route.name ? 'selected' : ''}`\n        };\n\n        return <div className=\"side-menu\" style={{height: '100%', width: '100%'}}>\n            <style dangerouslySetInnerHTML={{__html:`\n                .side-menu .menu-item-overview {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview.svg);\n                }\n\n                .side-menu .menu-item-overview.selected{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-overview:hover{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview-hovered.svg);\n                }\n\n                .side-menu .menu-item-item-status {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status.svg);\n                }\n\n                .side-menu .menu-item-item-status.selected{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-item-status:hover{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status-hovered.svg);\n                }\n            `}}/>\n            <div className='side-menu-orbs' style={{padding: 30, marginBottom: 20}}>\n                <img style={{height: 32, width:32}} src='/orbs-logo.svg'/>\n            </div>\n            {\n                _.sortBy(routes, r => r.displayIndex).map(\n                    route => <Link\n                        onClick={(history) => this.navigateTo(route, history)}\n                        className={className(route)}\n                    />\n                )\n            }\n        </div>\n    }\n\n    navigateTo(route: IRoute, history: any) {\n        history.push(route.path);\n        this.currentRoute = route;\n    }\n\n    componentDidMount(): void {\n        window.onpopstate = () => this.currentRoute = getCurrentRoute();\n    }\n\n    componentWillUnmount(): void {\n        window.onpopstate = null;\n    }\n}\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {observer} from \"mobx-react\";\nimport {observable} from \"mobx\";\n\n@observer\nexport class LoadingPage extends React.Component<{}, {}> {\n\n    @observable loadingCaption = \"Loading...\";\n\n    render() {\n        return <div className={\"loading-page\"}>\n            <div className={\"logo-container\"}>\n                <div style={{\n                    height: '100%',\n                    width: '100%',\n                    textAlign: 'center'\n                }}><img className={\"orbs-logo\"} src={process.env.REACT_APP_BASE_URL + \"/orbs-logo.svg\"}/></div>\n                <div className={\"loading-lbl\"}>{this.loadingCaption}</div>\n            </div>\n        </div>\n    }\n\n    componentDidMount() {\n        let i = 0;\n        setInterval(() => {\n            this.loadingCaption = \"Loading\" + _.range(i).map(() => '.').join('');\n            i = (i + 1) % 4;\n        }, 500)\n    }\n}\n","import React from \"react\";\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\n\n\nexport class ErrorPage extends React.Component<{err: Error}, {}> {\n\n    render() {\n        return <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', textAlign: 'left'}}>\n            <Alert severity=\"error\">\n                <AlertTitle>Error</AlertTitle>\n                We were unable to load the page at the moment. Please try again. <br/>\n                <span style={{color: \"#bebebe\"}}><pre>Error: {this.props.err.toString()}</pre></span>\n            </Alert>\n        </div>\n    }\n\n}\n","import * as _ from 'lodash';\nimport React from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport {RecordStore} from \"./record-store\";\nimport {BrowserRouter, Switch, Route, HashRouter} from 'react-router-dom';\nimport {routes} from \"./routes\";\nimport {SideMenu} from \"./side-menu\";\nimport {ItemStatusPage} from \"./item-status-page\";\nimport {OverviewPage} from \"./overview-page\";\nimport {LoadingPage} from \"./loading-page\";\nimport {ErrorPage} from \"./error-page\";\n\n\n@inject('records')\n@observer\nexport class App extends React.Component<{\n  records?: RecordStore\n},{}> {\n  render() {\n    return this.props.records.ready ? <BrowserRouter>\n      <div style={{height: '100%', width: '100%', maxWidth: 2000, display: \"inline-block\", position: 'relative', textAlign: 'left'}}>\n        <div style={{position: 'absolute', top: 0, left: 0, bottom: 0, width: 89}}>\n          <SideMenu/>\n        </div>\n        <div style={{position: 'absolute', top: 0, left: 90, bottom: 0, right:0, overflow: 'auto', borderRight: \"1px solid #ebedf8\"}}>\n            <Switch>\n              {\n                routes.map(route => {\n                  const PageComponent = route.component;\n                  return <Route path={route.path}>\n                    <PageComponent/>\n                  </Route>\n                })\n              }\n            </Switch>\n        </div>\n      </div>\n    </BrowserRouter>\n            : this.props.records.err ? <ErrorPage err={this.props.records.err}/>\n            : <LoadingPage/>\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"mobx-react\";\nimport {createStores} from \"./stores\";\nimport {App} from \"./App\";\n\nconst stores = createStores();\n(window as any).stores = stores;\n\nReactDOM.render(\n    <Provider {...stores}>\n        <App/>\n    </Provider>\n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import {RecordStore} from \"./record-store\";\nimport {Statistics} from \"./statistics\";\n\nexport interface IStores {\n    records: RecordStore;\n    statistics: Statistics;\n}\n\nexport function createStores(): IStores {\n    const records = new RecordStore();\n    return {\n        records,\n        statistics: new Statistics(records)\n    }\n}\n"],"sourceRoot":""}